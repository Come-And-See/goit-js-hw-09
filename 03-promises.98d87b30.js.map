{"mappings":"qhBAOA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAO,CACXC,MAAOC,SAASC,cAAc,uBAC9BC,KAAMF,SAASC,cAAc,sBAC7BE,OAAQH,SAASC,cAAc,wBAC/BG,OAAQJ,SAASC,cAAc,0BAGjCH,EAAKM,OAAOC,iBAAiB,SAE7B,SAAuBC,GACrBA,EAAEC,iBAEF,MAAMC,EAAQV,EAAKC,MAAMU,MACnBC,EAAOZ,EAAKI,KAAKO,MACjBE,EAASb,EAAKK,OAAOM,MAE3B,IAAIG,EAAW,EACXC,GAASL,EAEbM,YAAW,KACT,MAAMC,EAAaC,aAAY,KAqBnC,IAAuBC,EAAUlB,EApB3Ba,GAAY,GAoBKK,EAnBHL,EAmBab,EAnBHc,EAoBZ,IAAIK,SAAQ,CAACC,EAASC,KACdC,KAAKC,SAAW,GAGpCH,EAAQ,C,SAAEF,E,MAAUlB,IAGpBqB,EAAO,C,SAAEH,E,MAAUlB,GAAQ,KA1BxBwB,MAAK,EAACN,SAAEA,EAAQlB,MAAEA,MACjByB,EAAA5B,GAAS6B,OAAOC,QACd,uBAAqBT,QAAiBlB,MAAU,IAGnD4B,OAAM,EAACV,SAAEA,EAAQlB,MAAEA,MAClByB,EAAA5B,GAAS6B,OAAOG,QACd,sBAAoBX,QAAiBlB,MAAU,IAGrDc,IAAUH,EACNE,KAAcD,GAChBkB,cAAcd,EAAW,GAE1BL,EAAK,GACPF,E","sources":["src/js/03-promises.js"],"sourcesContent":["// Напиши скрипт, який на момент сабміту форми викликає функцію createPromise(position, delay) стільки разів, скільки ввели в поле amount.\n// Під час кожного виклику передай їй номер промісу(position), що створюється, і затримку, враховуючи першу затримку(delay), введену користувачем, і крок(step).\n\n// Доповни код функції createPromise таким чином, щоб вона повертала один проміс, який виконується або відхиляється через delay часу.\n// Значенням промісу повинен бути об'єкт, в якому будуть властивості position і delay зі значеннями однойменних параметрів.\n// Використовуй початковий код функції для вибору того, що потрібно зробити з промісом - виконати або відхилити.\n\nimport Notiflix from 'notiflix';\n\nconst refs = {\n  delay: document.querySelector('input[name=\"delay\"]'),\n  step: document.querySelector('input[name=\"step\"]'),\n  amount: document.querySelector('input[name=\"amount\"]'),\n  submit: document.querySelector('button[type=\"submit\"]'),\n};\n\nrefs.submit.addEventListener('click', launchPromise);\n\nfunction launchPromise(e) {\n  e.preventDefault();\n\n  const DELAY = refs.delay.value;\n  const STEP = refs.step.value;\n  const AMOUNT = refs.amount.value;\n\n  let position = 0;\n  let delay = +DELAY;\n\n  setTimeout(() => {\n    const intervalID = setInterval(() => {\n      position += 1;\n      createPromise(position, delay)\n        .then(({ position, delay }) => {\n          Notiflix.Notify.success(\n            `✅ Fulfilled promise ${position} in ${delay}ms`\n          );\n        })\n        .catch(({ position, delay }) => {\n          Notiflix.Notify.failure(\n            `❌ Rejected promise ${position} in ${delay}ms`\n          );\n        });\n      delay += +STEP;\n      if (position === +AMOUNT) {\n        clearInterval(intervalID);\n      }\n    }, STEP);\n  }, DELAY);\n}\n\nfunction createPromise(position, delay) {\n  const promise = new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    if (shouldResolve) {\n      // Fulfill\n      resolve({ position, delay });\n    } else {\n      // Reject\n      reject({ position, delay });\n    }\n  });\n  return promise;\n}\n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$refs","delay","document","querySelector","step","amount","submit","addEventListener","e","preventDefault","DELAY","value","STEP","AMOUNT","position1","delay1","setTimeout","intervalID","setInterval","position","Promise","resolve","reject","Math","random","then","$parcel$interopDefault","Notify","success","catch","failure","clearInterval"],"version":3,"file":"03-promises.98d87b30.js.map"}